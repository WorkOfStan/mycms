name: PHP Composer + PHPUnit + PHPStan

on:
  push:
    branches-ignore:
      # notest branches to ignore testing of partial online commits
      - 'notest/**'

  pull_request:
    branches-ignore:
      # notest branches to ignore testing of partial online commits
      - 'notest/**'

jobs:
  build:

    runs-on: ${{ matrix.operating-system }}
    # Limit the running time
    timeout-minutes: 10
    strategy:
      matrix:
        operating-system:
          - "ubuntu-latest"
        php-version: ['5.6', '7.0', '7.1', '7.2', '7.3', '7.4']
        # If the bug https://bugs.php.net/bug.php?id=73803 materializes, then remove 7.1 from php-version list above, as
        # ZipArchive class has public properties, that are not visible via reflection in PHP/7.1.
        # Therefore using tools like PHPStan generates error: Access to an undefined property ZipArchive::$numFiles. in class\MyAdminProcess

    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install PHP ${{ matrix.php-version }} Test on ${{ matrix.operating-system }}"
      uses: "shivammathur/setup-php@v2"
      with:
        php-version: "${{ matrix.php-version }}"
        tools: composer:v2, phpstan
        # Note: phpstan call fails for PHP<7.1
      env:
        # fixes Error: Could not authenticate against github.com
        COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # https://github.com/actions/cache
    # A repository can have up to 5GB of caches. Once the 5GB limit is reached, older caches will be evicted based on when the cache was last accessed.
    # Caches that are not accessed within the last week will also be evicted.
    - name: Cache composer dependencies
      uses: actions/cache@v2
      id: vendor-cache
      with:
        # path to Checkout working directory is /home/runner/work/repo-name/repo-name , so just add /vendor/
        path: ${{ github.workspace }}/vendor/
        # Use composer.json for key, if composer.lock is not committed.
        key: ${{ runner.os }}-PHP${{ matrix.php-version }}-vendor-${{ hashFiles('**/composer.json') }}
        # key: ${{ runner.os }}-PHP${{ matrix.php-version }}-vendor-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-PHP${{ matrix.php-version }}-vendor-

    - name: Validate composer.json and composer.lock
      if: ${{ steps.vendor-cache.outputs.cache-hit != 'true' }}
      run: composer validate

    - name: Install no-dev dependencies
      if: ${{ steps.vendor-cache.outputs.cache-hit != 'true' }}
      run: composer update --no-dev --prefer-dist --no-progress

    - name: Install dependencies
      if: ${{ steps.vendor-cache.outputs.cache-hit != 'true' }}
      run: composer update --prefer-dist --no-progress

    # PHPunit is installed anyway, so it doesn't make sense to use tools: phpunit
    - name: "PHPUnit tests"
      run: "vendor/bin/phpunit"

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    # - name: Run test suite
    #   run: composer run-script test

    # PHPStan works for PHP/7.1+ so it can't even be in composer.json
    - name: "Composer + PHPStan"
      if: ${{ matrix.php-version >= '7.1' }}
      run: |
        #to fix `Constant DB_USERNAME not found.` etc
        cp -p conf/config.local.dist.php conf/config.local.php
        #composer update --prefer-dist --no-progress
        phpstan analyse --no-interaction --no-progress .
        # or ?
        #composer require --dev phpstan/phpstan-webmozart-assert --prefer-dist --no-progress
        #phpstan --configuration=conf/phpstan.webmozart-assert.neon analyse --no-interaction --no-progress .
